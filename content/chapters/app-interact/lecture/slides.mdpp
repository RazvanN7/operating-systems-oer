---
title: "OS: Application Interaction"
revealOptions:
    background-color: 'aquamarine'
    transition: 'none'
    slideNumber: true
    autoAnimateDuration: 0.0
---

# Application Interation

---

## Intro

* What does it mean that applications interact?
* Do the following programs interact with other applications?

----

### Exhibit 1

```c
#include <stdio.h>

void main()
{
    printf("Hello, world\n");
}
```
----

### Exhibit 1

* The program simply prints a message to the standard output
* The terminal runs the program, so we do have some app interaction
* Also, it can interact with other programs by doing: `./hello_world | grep He`
* Interaction is static.
* However, this is not a voluntary interaction on the part of the program.
* The program was designed as a standalone one.

----

### Exhibit 2

```c
// writer.c
void main()
{
    FILE *fp = fopen("myf.txt", "r");
    fprintf(fp, "Hello");
    fclose(fp);
}
```
```c
// reader.c
void main()
{
    char a[20];
    FILE *fp = fopen("myf.txt", "r");
    fscanf(fp, "%s", a);
    printf("%s\n", a);
    fclose(fp);
}
```
----
### Exhibit 2

* The 2 programs indeed interact.
* But is there any difference from the previous example?
* There is no protocol of interaction.
* If one of the applications did not exist, the other one could still be a valid, meaningful program.
----

### Exhibit 3

```c
int main ()
{
    int pid = fork();
    if (pid == 0)
    {
        sleep(2);
        exit(EXIT_SUCCESS);
    }

    waitpid(pid, &status, 0);
    return 0;
}
```
----

### Exhibit 3

* The programs interact in a structured manner.
* One process waits for the other to finish.
* Interaction is dynamic - e.g. a process actively waits for the other.
* The 2 processes have been designed to work toghether.
----

### Exhibit 4 - WhatsApp application

![App1](media/whatsApp.svg)
----

### Exhibit 4 - WhatsApp application

* There is interaction between the main client application and other applications: photos, location, youtube etc.
* There is also interaction with the web server when sending messages.

----

### What does it mean that applications interact?

* Applications that run at the same time and that communicate with each other during their lifetimes.
* This communication involves passing messages and waiting for responses.

----

* This interaction is done between coupled or decoupled applications
* We distinguish between:
    - interaction of applications on the same system
    - interaction of applications on different systems
* Applications may communicate

----

## How do Apps Interact?

* An application that strives to communicate with other applications must offer an interface.
* The application may offer a user interface.
* TODO: image with user-app interface, app-app interface (on same system and on remote systems)

----

## OS - The Lawmaker

* The OS offers the primitives for app-app intercation
* The OS is like a lawmaker the dictates how the interaction takes place
* TODO: image with user-app, app-app interface on top of OS (same/remote system)

---

## App Classification

- Uni-process (single/multi threaded)
- Multi-process
- Multi-threaded
- Multi-system
- Examples
- These apps use OS primitives to communicate between them

---

## Interaction Models

- Inter-application
- Intra-application
- Communication channel
- Shared memory

----

## Communication channel

- TODO: img
- messages, packets
- sender receiver
- OS does the transmitting
- requires communication protocol
- used for inter-application interaction, but could be used for intra-app communication also

----

## Shared memory

- TODO: img
- apps have a common memory region they use to communicate
- OS sets up the memory
- requires synchronization
- used primarily by intra-app applications

---

## Operating System Interface for App Communication

----

## Communication channel

- send/receive interface
- notify/wait
- socket, named/anonymous pipes, signals
- suitable for any multisystem, multiprocess, uniprocess application
- demo with each

----

## Shared memory

- a common area between entities
- virtual address space between threads
- shared memory between processes processes
- demo with each
---

## Case study: Our own server

- uniprocess server, simply sends the time
- multithreaded server, uses threads to send back the time
- multiprocess server: sends the time or starts a process that does something
- multisystem: using a middleware 

---
